---
version: '2'
services:
  # The environment variable "TAG" is used throughout this file to
  # specify the version of the images to run. The default is set in the
  # '.env' file in this folder. It can be overridden with any normal
  # technique for setting environment variables, for example:
  #
  #   TAG=6.0.0-beta1 docker-compose up
  #
  # REF: https://docs.docker.com/compose/compose-file/#variable-substitution
  #
  # Also be sure to set the ELASTIC_VERSION variable. For released versions,
  # ${TAG} and ${ELASTIC_VERSION} will be identical, but for pre-release
  # versions, ${TAG} might contain an extra build identifier, like
  # "6.0.0-beta1-3eab5b40", so a full invocation might look like:
  #
  #   ELASTIC_VERSION=6.0.0-beta1 TAG=6.0.0-beta1-3eab5b40 docker-compose up
  #

services:
  debug-coovachilli:
    container_name: debug-coovachilli
    build: ./debug-coovachilli
    networks:
      - elk
      - debug
    depends_on:
      - radius

  debug-client:
    container_name: djangoproject
    image: ubuntu:latest
    networks:
      - debug
    depends_on:
      - debug-coovachilli

  djangoproject:
    container_name: djangoproject
    build: ./cloudberry-djangoproject
    environment:
      DOCKER_MANAGER_UUID: "d23eba83-fc94-4ede-90fe-34a7ceb468e9"
      DOCKER_MANAGER_KEY: "ufZvOiPh5EWp6kRH8if2oX4Wysx0WwS0"
    ports:
      - "${CLOUDBERRY_PORT_HTTP}:80"
    networks:
      - elk
    depends_on:
      - db

  docker-manager:
    container_name: docker-manager  
    build:
      context: cloudberry-docker-manager
    environment:
      OPENWISP_URL: "http://djangoproject/cloudberry"
      OPENWISP_UUID: "d23eba83-fc94-4ede-90fe-34a7ceb468e9"
      OPENWISP_KEY: "ufZvOiPh5EWp6kRH8if2oX4Wysx0WwS0"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - elk
    depends_on:
      - djangoproject

  db:
    container_name: db
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: example
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - database:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - elk

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-platinum:${TAG}
    container_name: elasticsearch_cb
    environment: ['http.host=0.0.0.0', 'transport.host=127.0.0.1', 'ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
    ports: ['127.0.0.1:9200:9200']
    networks: ['elk']

  kibana:
    image: docker.elastic.co/kibana/kibana:${TAG}
    container_name: kibana_cb
    environment: ['ELASTICSEARCH_USERNAME=kibana', 'ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}']
    ports: ['127.0.0.1:5601:5601']
    networks: ['elk']
    depends_on: ['elasticsearch']

  logstash:
    image: docker.elastic.co/logstash/logstash:${TAG}
    container_name: logstash_cb
    environment: ['xpack.monitoring.elasticsearch.password=${ELASTIC_PASSWORD}']
    # Provide a simple pipeline configuration for Logstash with a bind-mounted file.
    volumes: ['./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf', 'radiuslogs:/radiuslogs']
    user: '0'
    networks: ['elk']
    depends_on: ['elasticsearch', 'setup_logstash']

  # Run a short-lived container to set up Logstash.
  setup_logstash:
    image: centos:7
    container_name: setup_logstash
    volumes: ['./scripts/setup-logstash.sh:/usr/local/bin/setup-logstash.sh:ro']
    # The script may have CR/LF line endings if using Docker for Windows, so
    # make sure that they don't confuse Bash.
    command: ['/bin/bash', '-c', 'cat /usr/local/bin/setup-logstash.sh | tr -d "\r" | bash']
    environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
    networks: ['elk']
    depends_on: ['elasticsearch']

  setup_kibana:
    image: centos:7
    container_name: setup_kibana
    volumes: ['./scripts/setup-kibana.sh:/usr/local/bin/setup-kibana.sh:ro']
    command: ['/bin/bash', '-c', 'cat /usr/local/bin/setup-kibana.sh | tr -d "\r" | bash']
    environment: ['ELASTIC_PASSWORD=${ELASTIC_PASSWORD}']
    networks: ['elk']
    depends_on: ['elasticsearch']

  radius:
    container_name: radius
    build:
      context: radius/
    volumes: ['radiuslogs:/var/log/detail_authlog']
    user: '0'
    ports: ["1812:1812/udp", "1813:1813/udp"]
    networks: ['elk']
    depends_on: ['db']

networks:
  elk:
    driver: bridge
  debug:
    driver: bridge

volumes:
  radiuslogs:
  database:
